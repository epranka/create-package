#!/usr/bin/env node
const spawn = require("cross-spawn");
const ora = require("ora");

const foldStart = () => {
  console.log("travis_fold:start:$1\033[33;1m$2\033[0m");
};

const foldEnd = () => {
  console.log("\ntravis_fold:end:$1\r");
};

const spawnProcess = (message, command, args, options) => {
  return new Promise(resolve => {
    const spinner = ora(message + "...").start();
    const pr = spawn.spawn(command, args, options);
    pr.stdout.on("data", data => {});
    let stderr = "";
    pr.stderr.on("data", data => {
      stderr += data.toString();
    });
    pr.on("close", code => {
      if (code !== 0) {
        console.error();
        console.error(stderr);
        spinner.stopAndPersist({
          symbol: "✗",
          text: message
        });
        console.log("✗ Test failed");
        return process.exit(code);
      }
      spinner.stopAndPersist({
        symbol: "✓",
        text: message
      });
      resolve();
    });
  });
};

const removeTmpDirectory = async () => {
  await spawnProcess("Cleaning up", "rm", ["-rf", "tmp"]);
};

const getPackagePath = type => {
  return "tmp/child-package-" + type;
};

const createPackage = async type => {
  const packagePath = getPackagePath(type);
  await spawnProcess("Creating package: " + packagePath, "node", [
    "cli",
    packagePath,
    "--name",
    "test-package-" + type,
    "--silent",
    "--type",
    type
  ]);
};

const lintPackage = async type => {
  const packagePath = getPackagePath(type);
  await spawnProcess("Linting package: " + packagePath, "yarn", ["lint"], {
    cwd: packagePath
  });
};

const buildPackage = async type => {
  const packagePath = getPackagePath(type);
  await spawnProcess("Building package: " + packagePath, "yarn", ["build"], {
    cwd: packagePath
  });
};

const testPackage = async type => {
  const packagePath = getPackagePath(type);
  await spawnProcess("Testing package: " + packagePath, "yarn", ["test"], {
    cwd: packagePath
  });
};

const startTest = async () => {
  await removeTmpDirectory();
  const packageTypes = ["js", "jsx", "ts", "tsx"];
  for (const type of packageTypes) {
    foldStart();
    await createPackage(type);
    await lintPackage(type);
    await buildPackage(type);
    await testPackage(type);
    foldEnd();
  }
  await removeTmpDirectory();
  console.log("✓ Test successfully passed");
};

startTest();
