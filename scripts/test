#!/usr/bin/env node
const spawn = require("cross-spawn");
const ora = require("ora");

const isTravis = "TRAVIS" in process.env && "CI" in process.env;

const foldStart = type => {
  if (isTravis) {
    console.log("travis_fold:start:" + type);
  }
};

const foldEnd = type => {
  if (isTravis) {
    console.log("travis_fold:end:" + type);
  }
};

const spawnProcess = (message, command, args, options) => {
  return new Promise(resolve => {
    const spinner = ora(message + "...").start();
    const pr = spawn.spawn(command, args, options);
    pr.stdout.on("data", data => {});
    let stderr = "";
    pr.stderr.on("data", data => {
      stderr += data.toString();
    });
    pr.on("close", code => {
      if (code !== 0) {
        console.error();
        console.error(stderr);
        spinner.stopAndPersist({
          symbol: "✗",
          text: message
        });
        console.log("✗ Test failed");
        return process.exit(code);
      }
      spinner.stopAndPersist({
        symbol: "✓",
        text: message
      });
      resolve();
    });
  });
};

const removeTmpDirectory = async () => {
  try {
    await spawnProcess("Cleaning up", "rm", ["-rf", "tmp"]);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

const getPackagePath = type => {
  return "tmp/child-package-" + type;
};

const createPackage = async type => {
  try {
    const packagePath = getPackagePath(type);
    await spawnProcess("Creating package: " + packagePath, "node", [
      "cli",
      packagePath,
      "--name",
      "test-package-" + type,
      "--silent",
      "--type",
      type
    ]);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

const lintPackage = async type => {
  try {
    const packagePath = getPackagePath(type);
    await spawnProcess("Linting package: " + packagePath, "yarn", ["lint"], {
      cwd: packagePath
    });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

const buildPackage = async type => {
  try {
    const packagePath = getPackagePath(type);
    await spawnProcess("Building package: " + packagePath, "yarn", ["build"], {
      cwd: packagePath
    });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

const testPackage = async type => {
  try {
    const packagePath = getPackagePath(type);
    await spawnProcess("Testing package: " + packagePath, "yarn", ["test"], {
      cwd: packagePath
    });
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

const startTest = async () => {
  try {
    await removeTmpDirectory();
    const packageTypes = ["js", "jsx", "ts", "tsx"];
    for (const type of packageTypes) {
      foldStart(type);
      await createPackage(type);
      await lintPackage(type);
      await buildPackage(type);
      await testPackage(type);
      foldEnd(type);
    }
    await removeTmpDirectory();
    console.log("✓ Test successfully passed");
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

startTest();
